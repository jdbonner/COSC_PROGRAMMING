///////////////////////////////////////////////////Day 1//////////////////////////////////////////////

Python - intro


vim $HOME/.vimrc  # Enables Color Coding for Code
syntatx enable  # Sets starting tabs to 4 spaces
set tabstop=4  # 
set shiftwidth=4
set expandtab
set number
filetype indent on
set autoindent

nano $HOME/.nanorc
set tabsize 4
set tabstospaces
set linenumbers




data types
strings
floats
bools

test the type with type() function
typecasting

variable declaration
variable = datatype

//////////////////////////////////////////////End of day 1//////////////////////////////////////////////////
//////////////////////////////////////////////day 2///////////////////////////////////////////////////

bool typecasting examples
bool('0') = true
bool(1) = true
bool() = 


split and join
word = ''
type(word)
output:class 'str'

lists and tuples

#elements are stored inside
tuple() #are immutable uses () to display
list() #are mutable uses [] to display

using join
variable = ''.join(variable)
#use del to remove letters
del variable[-2] #deletes element of the list

using split
variable.split(':') #selector can be whatever is in the string as long as proper datatype. by default it splits by spaces.

.format
#example
'{}'.format(variable[0])
print('{} will bear the ring'.format(variable[0]))
#escape characters is backslash /
#example2
'{} and {} beared the ring'.format(fellowship[0], fellowship[1])
'{element0} and {element1} beared the ring'.format(variablelist[

.append
#example
variable.append(value) #use to append to a list.

'''#multi line comment
'''
/////////////////////////////EXERCISE 1////////////////////////////
#using split and join
'''
#Activity - Split an email address

email = 'name@domain.com'      #value to split
['name', 'domain', 'com']      #example of how output should appear

email1 = email.split('@')      #splitting the string value by the @ symbol.
email2 = '.'.join(email1)      #rejoining the string value with a . symbol in order to complete the split with the .com
email3 = email2.split('.')     #splits by the . in the string forming 3 seperated values in the desired output format
print(email1)                  #prints the first split which is for testing purposes
print(email2)                 #prints the value of joinging the list back together for testing
print(email3)                 #prints the completed splitting of the code for display purposes
'''
#using format
'''
email = 'name@domain.com'
print(email.split('@'))
print('[{}],'.format(email.split('@')[0]))
'''
#using append
'''
blank = []                  #declares a variable named blank 
email = 'name@domain.com'
email2 = email.split('@')
email3 = email.split('.')

print(email2[1].split('.'))
print(email2)
blank.append(email2[0])
blank.append(email2[1].split('.')[0])
blank.append(email2[1].split('.')[1])
print(blank)
'''
//////////////////////////////END///////////////////////////////////

Flow control
#use \n to escape and make a new line
input()
#default value is a string. declaire a different data type if you want it to be an int or float.

if <condition>:
  <indented code block>
elif <condition>:
  <indented code block>
elif <condition>:
  <indented code block>
else:
  <indented code block>

#example
num = int(input('Type a number:\n'))
if num ==7:
  print('This is True')
elif num < 7:
  print('num ' + str(num) + ' is < 7'
elif num > 7 and num < 20:
  print(str(num) + ' is between 7 and 20')
else:
  print('This is else')

/////////////////////////////////////////EXERCISE 2///////////////////////////////////////
FizzBuzz is an interview question that is said to filter out 99.5% of programming job candidates.
Modify deliverable.py so that it takes a number from the user and prints it (the number) if it isn’t divisible by 3 or 5. 
For multiples of 3 print 'fizz' instead. For multiples of 5 print 'buzz' instead.
For multiples of 3 and 5 print 'fizzbuzz'.


#solution 1
'''
#!/usr/bin/env python3

num = int(input('Please input a number: '))    #declaired the variable and takes the input from the user while only allowing integers
if num % 3 == 0 and num % 5 == 0:              #first part of the if statement checking for both conditions to be divisible
  print('fizzbuzz')                            #prints fizzbuzz
elif num % 3 == 0:                             #elif checking if divisible by 3
  print('fizz')                                #prints fizz
elif num % 5 == 0:                             #elif checking if divisible by 5
  print('buzz')                                #prints buzz
else:                                          #else to catch non divisible.
    print(num)                                 #prints the number that was input
'''






//////////////////////////////////////END of exercise 2////////////////////////////////////

#functions
def function():


#for loops
for variable in variable:
  <action>

#example
beer = ['Coors', 'Coors Light', 'Coors Banquet']
for i in beer:
  print(i)

#example2
xmen = ['Superman', 'Night Cawler', 'Deadpool', 'Storm']
for hero in xmen:
  if hero == 'Superman':
    print('WRONG UNIVERSE')
  elif hero == 'Deadpool':
    print(hero + ' is the best one!')
  else:
    print('This is a Marvel hero')


#while loops
while <condition> :
  <action>

#example 1
num = 0
while num < 5:
  print(num)
  num +=1

#examle 2
def test():
  while True:
    usr = input("Type 'Pass', 'Break', 'Continue', or 'Return' :\n").lower()
    if usr == 'pass':
      pass
      print("This is 'pass'")
    elif usr == 'break':
      break
      print("This is 'break'")
    elif usr == 'continue':
      continue
      print("This is 'continue'")
    elif usr == 'return':
      return "This is 'return'"
      
    else:
      print('you chose the wrong input, try again!')

test()


#.upper and .lower used to change all lower case and all lower case.

////////////////////////////////////////END of day 2////////////////////////////////////////////////////
/////////////////////////////////////DAY 3///////////////////////////////////////////////////
//////////////////////////////////////Exercise 3////////////////////////////////////////
Modify deliverable.py and implement guess_number so that it repeatedly asks the user for a number between 0 and 100 inclusive. 
If the user correctly guesses the value of the given argument n, print "WIN" and exit out of the loop. Otherwise indicate whether the guess was "too high" or "too low". 
Test the deliverable manually or run python3 check.py to run the supplied unit tests.

#solution
'''
#!/usr/bin/env python3 
def guess_number(n):
  control = True
  while control == True:
    print('Guess a number between 0 and 100')
    number = int(input('number: '))
    if number == n:
      print('WIN')
      control = False
      break
    elif number > n:
      print('too high')
    elif number < n:
      print('too low')
    else:
      print('something aint right')

guess_number(23)
'''
/////////////////////////////////////END of Exercise 3///////////////////////////////////
#rangecontrol
range()
#can be typecasted into a list. as a list it will display all the numbers counting up to that number
#range can also be typecasted to use start, stop, step.
#example1
list(range(5,10,1))
#output: [5,6,7,8,9]
list(range(start,stop,step))
#cam be counted backwards

#example2
nums = list(range(1,6))
for i in nums:
print(i)


#len
len()
#shows you the length of a list

#example1
def average(nums):
  print(sum(nums)/len(nums))

average([0,1,2,3,4,])

###############slice################
numbers = [0,1,1,2,3,5,8,13]
numbers[0]
0
numbers[0:2]
[0, 1]
numbers[2:4]
[1, 2]
numbers[:-1]
[0, 1, 1, 2, 3, 5, 8]
numbers[::-1]
[13, 8, 5, 3, 2, 1, 1, 0]

##################ord#############
ord('a')
#shows the ascii of a specific value.

###################chr######################
chr(97)
#shows the letter designation for ascii value

#example
alphabet = []
for i in range(97,123):
alphabet.append(chr(i))

alphabet

#dictionary
variable = {}

#example
book = {
    "Title" : "Cover",
    "Introduction" : "Page 2",
    "Chapter 1" : "Page 5"
}
#adding to a dictionary
book = {}
book["Title"] = "Cover"
book["Introduction"] = "Page 2"
book["Chapter 1"] = "Page 5"

#iterating through dictionaries
for part, page in book.items():
    print("{} is found on {}".format(part, page))

for i in <dictionary>:
  print('{} = {}'.format(i,dictionary[i]))

inventory {'item': value, 'item':value, 'item': value}
order (['wheels', 5], ['MVP', 2])

for i in order:
  total += inventory[i[0]] * i[1]


#removing from a dictionary
del book["Title"]
book.pop("Title")


#################Opening and closing files##################
ensure you close each file each time you open it.
fp = open("documentname.txt")
fp.close()
.open
.write
.writelines
.read
.readline
.readlines

!!!!!!!!!!!!how they want us to do it!!!!!!!!!!!!!!!!
with open("test.txt", 'w') as fp:
  fp.write('First line/n')

lines = [list]
fp.writelines(lines)

example
file = 'test.txt'
with open(file) as outfile:
  outfile.read()


/////////////////////////EXERCISE 4//////////////////////////////////////
#first challenge 
# 5. Challenge: Using the file school_prompt.txt, assign the third word of every line to a list called three.

three = []

with open('school_prompt.txt', 'r') as f:
    three = [line.split()[2] for line in f]
    print(three)

#second challenge
#Challenge: Create a list called emotions that contains the first word of every line in emotion_words.txt.
with open('emotion_words.txt','r') as fileref:
    line = fileref.readlines()
    emotions = []
    for words in line:
        word = words.split()
        emotions.append(word[0])
print (emotions)

#third challenge
#Challenge: Using the file school_prompt.txt, if the character ‘p’ is in a word, then add the word to a list called p_words.
with open('school_prompt.txt','r') as fileref:
    words = fileref.read().split()
    p_words = [word for word in words if 'p' in word]

#how the instructor solved it
p_words = []
with open('school_prompt.txt') as fp:
  for line in fp:
    for word in line.split():
      for char in word:
        if char == 'p':
          p_words.append(word)
          break



////////////////////////END of Exercise 4///////////////////////////////
#args-kwargs
https://www.geeksforgeeks.org/args-kwargs-python/
args has one *
kwargs has two **
args is a tuple
kwargs is a dictionary

def total(*args):
  print(args)





////////////////////////////////////////////////END of day 3////////////////////////////////////////////////////////

'a'.isnumeric()




