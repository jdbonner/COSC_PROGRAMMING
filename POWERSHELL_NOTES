##Logging in
############################LOGGING IN###################################
xfreerdp /u:student /v:10.50.40.8 -dynamic-resolution +glyph-cache +clipboard


############################RESOURCES###################################
https://cted.cybbh.io/tech-college/pns/public/pns/latest/guides/ps_sg.html
https://www.red-gate.com/simple-talk/sysadmin/powershell/when-to-quote-in-powershell/
https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_hash_tables?view=powershell-7.4
https://www.tutorialspoint.com/powershell/powershell_brackets.htm



############################################################DAY 1############################################################

############################COMMANDS AND NOTES###################################

#there is no word wrap
#difference between single ' and double " quotes: double quotes take variables and single quotes do not and are literal.
# -f is the same as -format
#to make an empty hash table use @{}
#to make an empty array use @()

#navigation and help
get-help
get-command -verb get
verb then noun
verb-noun
get-command -noun process


get-help *log*

get-help get-process -online
#gets the version of powershell
get-pwsh -version
#gets all the exe in a specified folder
get-childitem -path c:\windows -filter *.exe -recurse -name

get-alias -definition get-childitem
remove-item alias:<alias name>

#get process but only show the process name column
(get-process).processname

#gets the process for notepad and then kills it
(get-process notepad).kill()

#gets the members of get process
get-process | get-member

#the properties of the members
get-process | get-member -membertype properties

#gets the services and sends it to a table that formats it into name and status
get-service | format-table name, status

#read everything and output it to name and size
$cols = @{label="KB"; Expression = { [int]($_.Length/1KB) } }
get-childitem | format-table name, $cols


#gets all of the services that are running
get-service | where-object {$_.status -eq "running"}


#gets all of the services that are stopped
get-service | where-object -property status -eq 'stopped'
############################END###################################


############################FUNCTIONS###################################
#using a function and sorting the output
function fruit-host {
write-host "apple"
write-host "orange"
write-host "banana"
write-host "pear"
}
function fruit-output {
write-host "apple"
write-host "orange"
write-host "banana"
write-host "pear"
}
fruit-host | sort
fruit-output | sort

############################END###################################
############################VARIABLES###################################
#declairing variable
$x = 10
get-variable x
get-childitem variable:x

#declairing multiple variables
$x, $y, $z = "this", "that", "third"
test-path variable:x

#removing a variable
remove-variable x
del variable:x

#double quotes takes a variable while single does not and takes text as literal.
$var1 = "Jon"$var1range = 25..50
$var1 = get-random in $var1range
write-host "Hello $var1"
write-host 'hello $var1'



############################END###################################

############################PRACTICAL EXERCISE FIND CMDLETS###################################
Ensure that you have the latest copy of help by updating your help system.
update-help

Which cmdlets deal with the viewing/manipulating of processes?
get-process

Display a list of services installed on your local computer.
get-service

What cmdlets are used to write or output objects or text to the screen?
write-output

What cmdlets can be used to create, modify, list, and delete variables?
get-variable

What cmdlet can be used, other than Get-Help, to find and list other cmdlets?
man

Find the cmdlet that is used to prompt the user for input.
read-host

############################END###################################

############################PRACTICAL EXERCISE RUNNING CMDLETS###################################

Display a list of running processes.
get-process

Display a list of all running processes that start with the letter "s".
get-process -name s*

Find the cmdlet and its purpose for the following aliases:
#instructor solution
$array = "gal", "dir", "echo", "?", "%", "ft"
$array | foreach-object{get-alias $_}

gal
get-alias #gets the aliases for the current session

dir
get-childitem # gets the items and child items in one or more specified locations

echo
write-output # writes the specified objects to the pipeline.

?
where-object #selects objects from a collection based on their property values

%
foreach-object # performs an operation against each item in a collection of input objects

ft
format-table #formats the output as a table

Display a list of Windows Firewall Rules.
get-netfirewallrule

Create a new alias called "gh" for the cmdlet "Get-Help"
new-alias -name gh -value get-help


############################END###################################




############################PRACTICAL EXERCISE VARIABLES###################################

#Create a variable called "var1" that holds a random number between 25-50.
$var1range = 25..50
$var1 = get-random in $var1range

#Create a variable called "var2" that holds a random number between 1-10.
$var2range = 1..10
$var2 = get-random in $var2range

#Create a variable called "sum" that holds the sum of var1 and var2.
$sum = $var1 + $var2

#Create a variable called "sub" that holds the difference of var1 and var2.
$sub = $var1 - $var2

#Create a variable called "prod" that holds the product of var1 and var2.
$prod = $var1 * $var2

#Create a variable called "quo" that holds the quotient of var1 and var2.
$quo = $var1 / $var2

Replace the variables in text with their values in the following format:

"var1" + "var2" = 45

Replace the variables in text with their values in the following format:

"var1" - "var2" = 27

Replace the variables in text with their values in the following format:

"var1" * "var2" = 324

Replace the variables in text with their values in the following format:

"var1" / "var2" = 4


#solution
$var1 = get-random -minimum 25 -maximum 50
$var2 = get-random -minimum 1 -maximum 10

#then make and call each variable for output

#output
"$var1 + $var2 = $sum"
"{0} + {1} = {2}" -f $var1, $var2, $sum
#-f is same as -format

############################END###################################
############################PRACTICAL EXERCISE REVERSE ARRAYS###################################
$revarray = -3..15
$reverse = $revarray[($revarrray.length-1)..0]
$reverse

$revarray = -3..15
$reverse = $revarray
[array]::reverse($reverse)
write-output $revarray

############################END###################################

############################PRACTICAL EXERCISE ARRAYS & HASH TABLES###################################
$employee1 = [ordered]@{ First = "Mary"; Last = "HOPPER"; ID = 001; Job = "Software Lead"}
$employee2 = [ordered]@{ First = "John"; Last = "Williams"; ID = 002; Job = "Web Developer"}
$employee3 = [ordered]@{ First = "Alex"; Last = "Moran"; ID = 003; Job = "Software Developer"}


$employee1.username = "mhopper001"
$employee2.username = "jwilliams002"
$employee3.username = "amoran003"
$employee1.Status = "Management"
$employee2.Status = "Intermediate"
$employee3.Status = "Entry Level"


$employee1
$employee2
$employee3




############################END###################################
############################LOOP###################################
#getting all the local groups and outputting them in red with the local group members in plain text underneath
foreach ($grp in (get-localgroup).name) {
write-host "`n$grp" -foregroundcolor red
'======================================='
(get-localgroupmember -name $grp).name -replace("$env:computername\\",'')
}




############################END###################################

get-ciminstance win32_service | sort-object -property state | ft -property processid,name,state,pathname -autosize




############################################################END############################################################

############################################################DAY 2############################################################


############################BLOCKS############################

$myblock = {get-service | format-table name, status}

#you can use the & symbole or the invoke command to run
& $myblock
inkoke-command $myblock
############################END############################
############################SORT OBJECT############################
get-childitem | sort-object -property length -descending

get-childitem | sort-object -property Extension

get-childitem | sort-object -property Extension | format-table -groupby extension


get-service | group-object status

get-childitem | group-object {$_.length -lt 1kb}

get-process | select-object name,id
get-process | select-object -expandproperty name

############################END############################
############################PRACTICAL EXERCISE THE PIPELINE############################
#Display the start time of the earliest and latest running processes
get-process | where-object starttime | select name,starttime | sort-object starttime | select-object -first 1 -last 1

#Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
get-date -format "dddd"

#Identify a cmdlet that displays a list of installed hotfixes.
get-hotfix

#Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
get-hotfix | sort-object -property installedon | select installedon,hotfixid

#Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
get-hotfix | sort-object -property description | select description,hotfixid,installedon

############################END############################
############################WHERE-OBJECT############################
get-service | where-object{$_.status -eq 'running'}

get-childitem *.txt| where-object{$_.length -gt 100}

get-process | where-object {$_.company -like 'micro*'} | format-table name,description,company

get-process | where-object {$_.company -notlike 'powershell*'} 

get-process | where-object processname -ne "Idle" | sort-object starttime | select-object -last 10 | format-table processname, starttime

get-process | where-object processname -ne "Idle" | sort-object starttime | select-object -last 10 | format-table processname, starttime

############################END############################
############################GET-UNIQUE############################

2,5,3,3,2,5,6,6,4,3,2,1,3,5,7,9,7,6 | sort-object | get-unique


############################END############################

############################MEASURE-OBJECT############################

get-childitem | measure-object length              #measures the length
1,2,3,4,5 | measure-object -average                #gets the average of the array
(1,2,3,4,5 | measure-object -average).average      #returns just the average section
(1,2,3,4,5 | measure-object -average).gettype()    #returns the type of output

############################END############################
############################COMPARE-OBJECT############################
'a bunch of text here' > testtext.txt
$before = get-childitem

'42' > testtext.txt
$after = get-childitem

compare-object $before $after -property length, name

############################END############################
############################FOREACH-OBJECT############################
$array = 1,2,3,4,5
$sum = 0
$array | foreach-object {$sum += $_}
$sum

get-process | select-object -first 10 | foreach-object {$_.name} | foreach-object {$_.toupper()}

$teams = <list of teams>
foreach($teams in $teams){"sportsball $teams"}

$var = ""
while($var -ne "MUHRINS"){
$var = read-host "which branch of the military is the best?"
}

$num = 6
do {
$num
$num++
}while($num -gt 5 -and $num -lt 40)

############################END############################
############################MAKING AND ADDING TO AN OBJECT############################
$MyTruck = new-object object
add-member -membertype noteproperty -name color -value white -inputobject $MyTruck

#shortened syntax
add-member -me noteproperty -in $Mytruck -na make -value Toyotas

add-member -inputobject $mytruck noteproperty model "Tundra sr5"

add-member -inputobject $mytruck -membertype noteproperty -name make -value Toyotas

add-member -inputobject $mytruck
scriptmethod accelerate { "skinny pedal on the right" }

$mytruck | add-member scriptmethod park { "finding a spot is impossible" }
$mytruck.park()
############################END############################
############################COMPARISON OPERATORS############################
#equality
-eq, -ceq    #Equals
-ne, -cne    #Not Equal
-gt, -cgt    #Greater Than
-lt, -clt    #Less Than
-ge, -cgt    #Greater Than or Equal To
-le, -cle    #Less Than or Equal To

#matching
-like, -clike                  #String matches wildcard pattern
-notlike, -cnotlike            #String does not match wildcard pattern
-match, cmatch                 #String matches regex pattern
-notmatch, -cnotmatch          #String does not match regex pattern

#replacement
-replace, -creplace            #replaces strings matching a regex pattern

#containment
-contains, -ccontains          #Contains (used for a collection of items)
-notcontains, -cnotcontains    #Collection does not contain a value
-in                            #Returns true when value is contained within a collection
-notin                         #Value is not in a collection

#type
-is                            #Returns true if both objects are the same type
-isnot                         #The objects are not the same type

############################END############################
############################COMPARISON OPERATORS EXAMPLES############################
$fruit = 'mango' 'watermelon', 'tomatoes'
$fruit -contains 'crayons'

$text = "your account username is ACE4495"
$pattern = '([A-F]{3}(\d{4})'
$text -match $pattern

############################END############################
############################FLOW CONTROL############################
$x = read-host -prompt 'input number 1 to 5'
if ($x -eq 5) {
write-host "bob"
}
elseif ($x -eq 4) {
write-host "sue"
}
elseif ($x -eq 2) {
write-host "tom"
}
elseif ($x -eq 1) {
write-host "mary"
}
else {
write-host "who am i?"
}
############################END############################
############################FOR LOOP############################
for($num = 1; $num -le 3; $num++){$num}

for($i = 0; $i -le 255; $i++) {
write-host 192.168.0.$i}

############################END############################
############################BREAK STATEMENT############################
$num = 0
while($num -lt 4) {
$num += 1
if($num -eq 2) {
continue
}
$num
}


############################END############################
############################FILE I/O############################

set-content -path .\example.txt -value "a string"

get-content .\example.txt

############################END############################
############################PRACTICAL EXERCISE LOOPING & ITERATION############################
Part 1

Use an array to iterate and open the following

Notepad

MS Edge

MSpaint

Query the processes

Kill the processes from PowerShell


Part 2

Use an array to iterate and open the following

Notepad

MS Edge

MSpaint

Query the processes

Save the ProcessIDs to a text file called procs.txt

Iterate through the ProcessIDs in the text file and kill them

Part 3

Use an array to iterate and open the following

Notepad

MS Edge

MSpaint

Query the processes and display only the following information in order by process ID

Process ID

Process Name

The time the process started

The amount of time the process has spent on the processor

The amount of memory assigned to the process

$apps = "notepad.exe", "msedge.exe", "mspaint.exe"
$proname = "notepad", "msedge", "mspaint"
$id
#foreach($apps in $apps) { start-process $apps}
foreach($proname in $proname) { get-process | where-object processname -eq $proname | select name,id,processname | select id | foreach-object $id += $_ }
#foreach($proname in $proname) { stop-process | where-object processname -eq $proname }





$array = "notepad", "iexplore", "mspaint"
$array | foreach-object { start-process $_ }
$file = "$pwd\procs.txt"
foreach($array in $array){
get-process | where-object{$_.name -like $array |
foreach-object{add-content $file $_.id} 
}

foreach($array in $array){
get-process | where-object{$_.name -like $array} |
format-table -property id, name, startime, totalprocessortime, virtualmemorysize, workingset64
}





############################END############################
############################SQUARE ROOT############################
#square root 
[math]:::sqrt(64)
############################END############################
############################POWER############################
#how to get the power of something
[math]::pow(6,2)
############################END############################
############################LIKE############################
#checks to see if strings are similar. is case insensitive by default
-like
#checks to see if strings are similar case sensitive
-clike
#checks to see if things are similiar case insensitive
-ilike

#examples
'msedge' -like '*MS*'
'msedge' -clike '*MS*'
'msedge' -match '^m.*$'

############################END############################




############################################################END############################################################
############################################################DAY 3#############################################################
############################USEFUL FUNCTION STUFF############################
# "elements provided on the pipeline"
function print-psitem{
  being {}
  process {foreach($i in $psitem) {$i}}
  end {}
}
function Print-Input {
    foreach($i in $input){$i}
}

function Get-Sum{
  Begin {$sum = 0}
  Process {$sum += $_; $_}
  End {$sum}
}
############################END############################
############################PRACTICAL EXERCISE ADVANCED FUNCTIONS############################
#Create an advanced function using Begin, Process, and End, that takes two(2) arguments. 
#The first argument being an array of at least ten(10) integers and the second argument being a single integer. 
#Search the array argument for every occurrence of the single integer argument then return the sum of all elements 
#in the array excluding every occurrence of the single integer argument.

function get-multisum($numbers, $number){
  
  Begin {$numbers = $numbers | where-object{$_ -ne $number}}
  Process {foreach($i in $numbers){$sum += $i}}
  End {$sum}
}

get-multisum @(1,2,3,4,5,6,7,8,9,10) 5

#instructor solution
function Get-Multisum([array]$array,[int]$number){
  Begin{$sum = 0}
  Process{
    foreach($num in $array){
    if($num -eq $number){
      continue
    }
    $sum += $num
  }
  }
  End{$sum}
}


#Create an advanced function using Begin, Process, End, that prompts the user to enter the names of three(3) U.S. 
#States then returns the names of the states in the order of longest name to shortest name and the amount of characters in each name.

Function Get-LongestName($state1, $state2, $state3){
    Begin {
    $states = $state1, $state2, $state3
    $sorted = $states | sort-object -property length -descending
    }
    Process {
    foreach($state in $sorted){ $state + ": " + $state.length }
    }
    End {}
}

Function Get-LongestName(){
    Begin {
    $state1 = read-host "enter a state"
    $state2 = read-host "enter a state"
    $state3 = read-host "enter a state"

    $states = $state1, $state2, $state3
    $sorted = $states | sort-object -property length -descending
    }
    Process {
    foreach($state in $sorted){ $state + ": " + $state.length }
    
    }
    End {}
}

#instructor solution

function get-longestname{
  begin{
    $count = 0
    $states = @()
  }
  process{
    while($count -lt 3) {
      $usr = read-host "enter a us state"
      $states += $usr
      $count += 1
    }
  }
  end{
    $list = $states | sort -property length -descending
    foreach($state in $list){
    "$state`: " + $state.length
    }
  }
}
############################END############################
############################SECTION############################


############################END############################


############################################################END############################################################



############################SECTION############################
############################END############################

############################################################DAY #############################################################
############################################################END############################################################









